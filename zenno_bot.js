(function () {
    try {
        // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
        const CONFIG = {
            chatAuth: "{-Variable.chatAuth-}",
            model: "{-Variable.model-}",
            server: "wss://noname.chat/socket.io/",
            maxDialogs: 20,
            inactivityTimeout: 15000, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 30000 –Ω–∞ 15000 (15 —Å–µ–∫—É–Ω–¥)
            typingDelay: [2000, 6000],
            responseDelay: [2000, 6000],
            searchTimeout: 30000,
            firstDialogTimeout: 30000,
            localApiUrl: "http://127.0.0.1:8001/api/chat",
            alternativeApiUrl: "http://192.168.0.49:8001/api/chat",
            maxRestoreAttempts: 1,
            reconnectDelay: [10000, 30000],
            maxReconnectAttempts: 5
        };

        // === –ß–Å–†–ù–´–ô –°–ü–ò–°–û–ö ===
        const BLACKLIST = [
            "—ç–π —Ç—ã", "—Ç—ã –±–æ—Ç", "–¢–æ —Å–∞–º–æ–µ 18+ –ò—â–∏ –≤ —Ç–≥: SNAROGA","—Å–ø–∞–º"
        ];

        // === –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
        if (CONFIG.chatAuth.includes("{-Variable") || CONFIG.model.includes("{-Variable") || CONFIG.server.includes("{-Variable")) {
            throw new Error("–ù–µ –∑–∞–º–µ–Ω–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ZennoPoster! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ chatAuth, model –∏ server.");
        }

        // === –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê ===
        let log = [];
        let processedPeers = [];
        let inactivePeers = new Set();
        let currentDialog = {
            active: false,
            peerId: null,
            chatId: null,
            messageCount: 0,
            startTime: null,
            lastMessageTime: null,
            inactivityTimer: null
        };
        let ws = null;
        let status = "start";
        let dialogCount = 0;
        let successfulDialogs = 0;
        let ackIdCounter = Math.floor(Date.now() / 1000) + Math.floor(Math.random() * 100000);
        let searchTimeout = null;
        let sessionId = null;
        let userConfig = null;
        let searchLimit = { current: 0, max: 50 };
        let isTyping = false;
        let restoreAttempts = {};
        let reconnectAttempts = 0;
        const threadId = Math.random().toString(36).substr(2, 5);

        // === –£–¢–ò–õ–ò–¢–´ ===
        function logAdd(msg) {
            const time = new Date().toLocaleTimeString('ru-RU');
            const line = `[${time}] [${threadId}] ${msg}`;
            log.push(line);
            
            if (log.length > 1000) {
                logAdd(`‚ÑπÔ∏è –õ–æ–≥ –æ–±—Ä–µ–∑–∞–Ω –¥–æ 1000 —Å—Ç—Ä–æ–∫, —É–¥–∞–ª–µ–Ω–æ ${log.length - 1000} –∑–∞–ø–∏—Å–µ–π`);
                log = log.slice(-1000);
            }
            
            window.__zp_log = log.join("\n");
            console.log(line);
        }

        function normalize(text) {
            return text.toLowerCase().replace(/[^a-z–∞-—è0-9\s@./]/gi, '');
        }

        function getRandomDelay(range) {
            return Math.floor(Math.random() * (range[1] - range[0] + 1)) + range[0];
        }

        function hasBlacklistTrigger(text) {
            const cleaned = normalize(text);
            const foundTrigger = BLACKLIST.find(trigger => cleaned.includes(trigger));
            if (foundTrigger) {
                logAdd(`str: ${currentDialog.peerId} | üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: ${foundTrigger}`);
                return true;
            }
            return false;
        }

        function startTyping() {
            if (ws?.readyState === WebSocket.OPEN && currentDialog.active && !isTyping) {
                isTyping = true;
                ws.send(`42${ackIdCounter}["back:start_typing"]`);
                logAdd(`üìù –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—á–∞—Ç–∞—Ç—å –¥–ª—è ${currentDialog.peerId} | ackId: ${ackIdCounter}`);
                ackIdCounter++;
            }
        }

        function stopTyping() {
            if (ws?.readyState === WebSocket.OPEN && currentDialog.active && isTyping) {
                isTyping = false;
                ws.send(`42${ackIdCounter}["back:stop_typing"]`);
                logAdd(`‚úã –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–µ—á–∞—Ç–∞—Ç—å –¥–ª—è ${currentDialog.peerId} | ackId: ${ackIdCounter}`);
                ackIdCounter++;
            }
        }

        // === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ö –ò–ò ===
        function getAIResponse(peerId, message) {
            try {
                logAdd(`str: ${peerId} | –ó–∞–ø—Ä–æ—Å –∫ –ò–ò (–º–æ–¥–µ–ª—å: ${CONFIG.model}, user_id: ${peerId})`);
                
                const requestBody = JSON.stringify({
                    model: CONFIG.model,
                    user_id: peerId,
                    message: message
                });

                let response = null;
                let apiUrl = CONFIG.localApiUrl;
                
                try {
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', apiUrl, false);
                    xhr.setRequestHeader('Content-Type', 'application/json');
                    xhr.send(requestBody);
                    
                    if (xhr.status === 200) {
                        response = xhr.responseText;
                    } else {
                        throw new Error(`HTTP ${xhr.status}: ${xhr.statusText}`);
                    }
                } catch (e) {
                    logAdd(`str: ${peerId} | –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API: ${e.message}`);
                    
                    apiUrl = CONFIG.alternativeApiUrl;
                    try {
                        const xhr2 = new XMLHttpRequest();
                        xhr2.open('POST', apiUrl, false);
                        xhr2.setRequestHeader('Content-Type', 'application/json');
                        xhr2.send(requestBody);
                        
                        if (xhr2.status === 200) {
                            response = xhr2.responseText;
                            logAdd(`str: ${peerId} | –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API`);
                        } else {
                            throw new Error(`HTTP ${xhr2.status}: ${xhr2.statusText}`);
                        }
                    } catch (e2) {
                        logAdd(`str: ${peerId} | –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ API: ${e2.message}`);
                        throw e2;
                    }
                }

                if (!response) {
                    throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò");
                }

                const data = JSON.parse(response);
                if (!data.response) {
                    throw new Error("–ù–µ—Ç –ø–æ–ª—è 'response' –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò");
                }

                logAdd(`str: ${currentDialog.peerId} | –û—Ç–≤–µ—Ç: ${data.response.substring(0, 50)}`);
                
                return { 
                    response: data.response, 
                    isLast: data.is_last === true 
                };
            } catch (e) {
                logAdd(`str: ${peerId} | ‚ùå –û—à–∏–±–∫–∞ –ò–ò: ${e.message}`);
                return null;
            }
        }

        // === WEBSOCKET –§–£–ù–ö–¶–ò–ò ===
        function connect() {
            const url = `${CONFIG.server}?EIO=4&transport=websocket&chatAuth=${CONFIG.chatAuth}`;
            logAdd(`üöÄ –°—Ç–∞—Ä—Ç ${threadId} | –ú–æ–¥–µ–ª—å: ${CONFIG.model} | –£—Å–ø–µ—à–Ω—ã—Ö: ${successfulDialogs}`);

            try {
                ws = new WebSocket(url);
                
                ws.onopen = () => {
                    reconnectAttempts = 0;
                    ws.send('40');
                    logAdd(`‚úÖ WebSocket –æ—Ç–∫—Ä—ã—Ç ${threadId} | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 40`);
                };
                
                ws.onmessage = (event) => {
                    logAdd(`üì® WebSocket –ø–æ–ª—É—á–∏–ª: ${event.data.substring(0, 100)}`);
                    handleMessage(event.data);
                };
                
                ws.onclose = (event) => {
                    logAdd(`üî¥ WebSocket –∑–∞–∫—Ä—ã—Ç: ${event.code}`);
                    handleDisconnect(event.code);
                };
                
                ws.onerror = (error) => {
                    logAdd(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'}`);
                    handleDisconnect(1006);
                };
                
            } catch (e) {
                logAdd(`‚ùå –û—à–∏–±–∫–∞ WebSocket: ${e.message}`);
                handleDisconnect(1006);
            }
        }

        function handleDisconnect(code) {
            cleanup();
            status = "stop";
            window.__zp_status = status;
            window.__zp_error = `WebSocket –∑–∞–∫—Ä—ã—Ç —Å –∫–æ–¥–æ–º ${code}`;
            logAdd(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: WebSocket –∑–∞–∫—Ä—ã—Ç —Å –∫–æ–¥–æ–º ${code}`);

            if (reconnectAttempts < CONFIG.maxReconnectAttempts) {
                reconnectAttempts++;
                const delay = getRandomDelay(CONFIG.reconnectDelay);
                logAdd(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${CONFIG.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}–º—Å`);
                setTimeout(connect, delay);
            } else {
                logAdd(`üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${CONFIG.maxReconnectAttempts})`);
            }
        }

        function cleanup() {
            if (searchTimeout) clearTimeout(searchTimeout);
            if (currentDialog.inactivityTimer) clearTimeout(currentDialog.inactivityTimer);
            isTyping = false;
            currentDialog.active = false;
        }

        function sendMessage(text) {
            if (ws?.readyState === WebSocket.OPEN && currentDialog.active) {
                const message = JSON.stringify(["back:send_message", {
                    text, 
                    isImage: false, 
                    peerOffline: false
                }]);
                ws.send(`42${ackIdCounter}${message}`);
                logAdd(`üì§ we: ${text.substring(0, 30)} -> ${currentDialog.peerId} | ackId: ${ackIdCounter}`);
                ackIdCounter++;
            } else {
                logAdd(`üö´ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: WebSocket –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
            }
        }

        function startSearch() {
            if (ws?.readyState === WebSocket.OPEN) {
                ws.send(`42${ackIdCounter}["back:start_search",null]`);
                logAdd(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ | ackId: ${ackIdCounter}`);
                ackIdCounter++;
                searchTimeout = setTimeout(() => {
                    if (!currentDialog.active) {
                        logAdd(`‚è≥ –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫`);
                        endDialog("—Ç–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞");
                    }
                }, CONFIG.searchTimeout);
            }
        }

        function endDialog(reason = "") {
            if (!currentDialog.active) {
                if (dialogCount < CONFIG.maxDialogs && ws?.readyState === WebSocket.OPEN) {
                    setTimeout(() => {
                        logAdd(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ${threadId}`);
                        ws.send(`42${ackIdCounter}["back:init"]`);
                        logAdd(`üì§ –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: back:init | ackId: ${ackIdCounter}`);
                        ackIdCounter++;
                    }, getRandomDelay([4000, 12000]));
                }
                return;
            }
            
            const duration = Date.now() - currentDialog.startTime;
            const isSuccessful = reason.includes("—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            
            logAdd(`üèÅ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω ${currentDialog.peerId} | ${reason} | ${Math.round(duration/1000)}—Å | –£—Å–ø–µ—à–Ω—ã–π: ${isSuccessful}`);
            
            if (isSuccessful) {
                successfulDialogs++;
                logAdd(`üéâ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: ${successfulDialogs}`);
            }
            
            stopTyping();
            currentDialog.active = false;
            dialogCount++;
            
            if (ws?.readyState === WebSocket.OPEN) {
                ws.send(`42${ackIdCounter}["back:stop_dialog"]`);
                logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:stop_dialog | ackId: ${ackIdCounter}`);
                ackIdCounter++;
            }
            
            cleanup();
            
            currentDialog = {
                active: false,
                peerId: null,
                chatId: null,
                messageCount: 0,
                startTime: null,
                lastMessageTime: null,
                inactivityTimer: null
            };
            
            if (dialogCount < CONFIG.maxDialogs) {
                setTimeout(() => {
                    logAdd(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ ${threadId}`);
                    if (ws?.readyState === WebSocket.OPEN) {
                        ws.send(`42${ackIdCounter}["back:init"]`);
                        logAdd(`üì§ –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: back:init | ackId: ${ackIdCounter}`);
                        ackIdCounter++;
                    }
                }, getRandomDelay([4000, 12000]));
            } else {
                logAdd(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: ${dialogCount} –¥–∏–∞–ª–æ–≥–æ–≤, ${successfulDialogs} —É—Å–ø–µ—à–Ω—ã—Ö`);
                status = "stop";
                window.__zp_status = status;
                if (ws?.readyState === WebSocket.OPEN) ws.close();
            }
        }

        // === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
        function handleMessage(data) {
            if (ws?.readyState !== WebSocket.OPEN) {
                logAdd(`üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: WebSocket –∑–∞–∫—Ä—ã—Ç (readyState: ${ws?.readyState})`);
                return;
            }

            if (data === '40') {
                ws.send(`42${ackIdCounter}["back:init"]`);
                logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:init | ackId: ${ackIdCounter}`);
                ackIdCounter++;
                return;
            }
            
            if (data.startsWith('40{')) {
                try {
                    const sessionData = JSON.parse(data.slice(2));
                    if (sessionData.sid) {
                        sessionId = sessionData.sid;
                        logAdd(`üîê –ü–æ–ª—É—á–µ–Ω session ID: ${sessionData.sid}`);
                        
                        ws.send(`42${ackIdCounter}["back:init"]`);
                        logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:init –ø–æ—Å–ª–µ session ID | ackId: ${ackIdCounter}`);
                        ackIdCounter++;
                    }
                } catch (e) {
                    logAdd(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ session ID: ${e.message}`);
                }
                return;
            }
            
            if (data === '2') {
                ws.send('3');
                logAdd(`üíì Ping-pong: –ø–æ–ª—É—á–µ–Ω 2, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 3`);
                return;
            }

            if (data === '41' || data.startsWith('44')) {
                logAdd(`üö® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${data}`);
                if (data.includes('need refresh')) {
                    logAdd(`üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω need refresh, –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ IP –ø—Ä–æ–∫—Å–∏. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç.`);
                    status = "stop";
                    window.__zp_status = status;
                    window.__zp_error = "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑-–∑–∞ need refresh (–≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ IP –ø—Ä–æ–∫—Å–∏)";
                    cleanup();
                    if (ws?.readyState === WebSocket.OPEN) {
                        ws.close();
                        logAdd(`üî¥ WebSocket –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ need refresh`);
                    }
                    return;
                }
                if (ws?.readyState === WebSocket.OPEN) {
                    logAdd(`üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ —Ä–∞–∑—Ä—ã–≤–∞`);
                    ws.send(`42${ackIdCounter}["back:init"]`);
                    logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:init | ackId: ${ackIdCounter}`);
                    ackIdCounter++;
                    setTimeout(() => {
                        if (ws?.readyState !== WebSocket.OPEN) {
                            logAdd(`üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
                            handleDisconnect(1005);
                        }
                    }, getRandomDelay([6000, 9000]));
                } else {
                    logAdd(`üî¥ WebSocket –∑–∞–∫—Ä—ã—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
                    handleDisconnect(1005);
                }
                return;
            }

            if (data.startsWith('42') || data.startsWith('43')) {
                try {
                    let eventJson = data.slice(2);
                    let ackId = null;
                    
                    const ackMatch = eventJson.match(/^(\d+)(\[.*\]$)/);
                    if (ackMatch) {
                        ackId = ackMatch[1];
                        eventJson = ackMatch[2];
                    }
                    
                    const eventData = JSON.parse(eventJson);
                    handleEvent(eventData, ackId, data.startsWith('43'));
                } catch (e) {
                    logAdd(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${e.message} | Data: ${data.substring(0, 100)}`);
                }
            }
        }

        function handleEvent(eventData, ackId = null, isAckResponse = false) {
            if (ws?.readyState !== WebSocket.OPEN) {
                logAdd(`üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ ${JSON.stringify(eventData)}: WebSocket –∑–∞–∫—Ä—ã—Ç`);
                return;
            }

            if (isAckResponse) {
                logAdd(`‚úÖ –ü–æ–ª—É—á–µ–Ω ack: ${ackId} | EventData: ${JSON.stringify(eventData).substring(0, 100)}`);
                
                if (eventData && eventData[0] && typeof eventData[0] === 'object' && eventData[0].userSex !== undefined) {
                    userConfig = eventData[0];
                    logAdd(`‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(userConfig)}`);
                    
                    if (userConfig.needRestoreDialog) {
                        ws.send(`42${ackIdCounter}["back:restore_dialog_with_messages"]`);
                        logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:restore_dialog_with_messages | ackId: ${ackIdCounter}`);
                        ackIdCounter++;
                    } else {
                        setTimeout(() => {
                            startSearch();
                        }, getRandomDelay([2000, 3000]));
                    }
                } else if (eventData && eventData[0] === "no_peer") {
                    logAdd(`üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫`);
                    setTimeout(() => {
                        startSearch();
                    }, getRandomDelay([2000, 3000]));
                }
                return;
            }

            const [eventName, ...args] = eventData;

            switch (eventName) {
                case 'front:start_dialog':
                    const userData = args[0];
                    const peerId = userData?.nickname || 'Unknown';
                    
                    if (processedPeers.includes(peerId)) {
                        restoreAttempts[peerId] = (restoreAttempts[peerId] || 0) + 1;
                        logAdd(`üîÑ str: ${peerId} | –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ | –ü–æ–ø—ã—Ç–∫–∞: ${restoreAttempts[peerId]}`);
                        
                        if (restoreAttempts[peerId] >= CONFIG.maxRestoreAttempts) {
                            logAdd(`üö´ str: ${peerId} | –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (${CONFIG.maxRestoreAttempts})`);
                            inactivePeers.add(peerId);
                            ws.send(`42${ackIdCounter}["back:stop_dialog"]`);
                            logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:stop_dialog –¥–ª—è ${peerId} | ackId: ${ackIdCounter}`);
                            ackIdCounter++;
                            setTimeout(() => startSearch(), getRandomDelay([2000, 3000]));
                            return;
                        }
                        
                        endDialog("–ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫");
                        return;
                    }
                    
                    processedPeers.push(peerId);
                    if (processedPeers.length > 1000) {
                        processedPeers = processedPeers.slice(-500);
                    }
                    
                    currentDialog = {
                        active: true,
                        peerId: peerId,
                        chatId: `chat_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,
                        messageCount: 0,
                        startTime: Date.now(),
                        lastMessageTime: Date.now(),
                        inactivityTimer: null
                    };
                    
                    logAdd(`üé¨ str: ${peerId} | –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç | UserData: ${JSON.stringify(userData)}`);
                    status = "start";
                    window.__zp_status = status;
                    
                    if (searchTimeout) clearTimeout(searchTimeout);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 15 —Å–µ–∫—É–Ω–¥ - –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
                    currentDialog.inactivityTimer = setTimeout(() => {
                        if (currentDialog.active) {
                            endDialog("–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥");
                        }
                    }, CONFIG.inactivityTimeout);
                    
                    if (ws?.readyState === WebSocket.OPEN) {
                        ws.send(`42${ackIdCounter}["back:stop_search",true]`);
                        logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:stop_search | ackId: ${ackIdCounter}`);
                        ackIdCounter++;
                    }
                    break;

                case 'front:send_message':
                    if (!currentDialog.active) return;
                    
                    const messageData = args[0];
                    
                    if (ackId && ws?.readyState === WebSocket.OPEN) {
                        ws.send(`43${ackId}[true]`);
                        logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ack: ${ackId}`);
                    }
                    
                    if (messageData?.system && messageData?.id === "remove_after_message") {
                        logAdd(`üì© str: ${currentDialog.peerId} | –ü–æ–ª—É—á–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${messageData.text}`);
                        startTyping();
                        setTimeout(() => {
                            if (currentDialog.active && ws?.readyState === WebSocket.OPEN) {
                                stopTyping();
                                sendMessage("–ü—Ä–∏–≤–µ—Ç");
                                setTimeout(() => {
                                    endDialog("—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞");
                                }, getRandomDelay([2000, 3000]));
                            }
                        }, getRandomDelay(CONFIG.typingDelay));
                        return;
                    }
                    
                    if (messageData?.system || messageData?.isImage) return;
                    const text = messageData?.text;
                    if (!text) return;

                    logAdd(`üì• str: ${currentDialog.peerId} | ${text.substring(0, 50)}`);

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    if (hasBlacklistTrigger(text)) {
                        setTimeout(() => {
                            endDialog("—Ç—Ä–∏–≥–≥–µ—Ä —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
                        }, getRandomDelay([2000, 3000]));
                        return;
                    }

                    currentDialog.messageCount++;
                    currentDialog.lastMessageTime = Date.now();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if (currentDialog.inactivityTimer) clearTimeout(currentDialog.inactivityTimer);
                    currentDialog.inactivityTimer = setTimeout(() => {
                        if (currentDialog.active) {
                            endDialog("–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥");
                        }
                    }, CONFIG.inactivityTimeout);

                    const aiResult = getAIResponse(currentDialog.peerId, text);
                    
                    if (aiResult && aiResult.response) {
                        const typingDelay = getRandomDelay(CONFIG.typingDelay);
                        const responseDelay = getRandomDelay(CONFIG.responseDelay);
                        
                        startTyping();
                        
                        setTimeout(() => {
                            if (currentDialog.active && ws?.readyState === WebSocket.OPEN) {
                                stopTyping();
                                sendMessage(aiResult.response);
                                
                                if (aiResult.isLast) {
                                    logAdd(`üèÅ str: ${currentDialog.peerId} | –ü–æ–ª—É—á–µ–Ω —Ñ–ª–∞–≥ is_last: true, –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ 20-30 —Å–µ–∫—É–Ω–¥`);
                                    setTimeout(() => {
                                        endDialog("—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò (is_last: true)");
                                    }, getRandomDelay([20000, 30000]));
                                }
                            }
                        }, responseDelay);
                    } else {
                        logAdd(`‚ùå str: ${currentDialog.peerId} | –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò`);
                    }
                    break;

                case 'front:stop_dialog':
                    if (currentDialog.active) {
                        const reason = args[0] || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞";
                        endDialog(`—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç: ${reason}`);
                    }
                    break;

                case 'front:peer_is_online':
                    if (currentDialog.active) {
                        logAdd(`üü¢ str: ${currentDialog.peerId} | –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ–Ω–ª–∞–π–Ω`);
                    }
                    break;

                case 'front:show_peer_typing':
                    if (currentDialog.active) {
                        logAdd(`‚å®Ô∏è str: ${currentDialog.peerId} | –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç`);
                    }
                    break;

                case 'front:hide_peer_typing':
                    if (currentDialog.active) {
                        logAdd(`‚úã str: ${currentDialog.peerId} | –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–∫—Ä–∞—Ç–∏–ª –ø–µ—á–∞—Ç–∞—Ç—å`);
                    }
                    break;

                case 'front:update_search_limit':
                    const limitData = args[0];
                    if (limitData) {
                        searchLimit = limitData;
                        logAdd(`üìä –õ–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${limitData.current}/${limitData.max}`);
                        
                        if (limitData.current >= limitData.max) {
                            logAdd(`üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞!`);
                            status = "stop";
                            window.__zp_status = status;
                            if (ws?.readyState === WebSocket.OPEN) ws.close();
                        }
                    }
                    break;

                case 'front:stop_search':
                    logAdd(`üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                    break;

                case 'front:refresh_page':
                    logAdd(`üö® –ü–æ–ª—É—á–µ–Ω front:refresh_page, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
                    if (ws?.readyState === WebSocket.OPEN) {
                        logAdd(`üîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–µ–∑ —Ä–∞–∑—Ä—ã–≤–∞`);
                        ws.send(`42${ackIdCounter}["back:init"]`);
                        logAdd(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: back:init | ackId: ${ackIdCounter}`);
                        ackIdCounter++;
                        setTimeout(() => {
                            if (ws?.readyState !== WebSocket.OPEN) {
                                logAdd(`üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
                                handleDisconnect(1005);
                            }
                        }, getRandomDelay([6000, 9000]));
                    } else {
                        logAdd(`üî¥ WebSocket –∑–∞–∫—Ä—ã—Ç, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ`);
                        handleDisconnect(1005);
                    }
                    break;

                default:
                    logAdd(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${eventName} | Args: ${JSON.stringify(args).substring(0, 100)}`);
                    break;
            }
        }

        // === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
        logAdd(`üöÄ –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ ${threadId} | –ú–æ–¥–µ–ª—å: ${CONFIG.model}`);
        logAdd(`üî¢ –ù–∞—á–∞–ª—å–Ω—ã–π ackIdCounter: ${ackIdCounter}`);
        status = "start";
        window.__zp_status = status;
        connect();

    } catch (e) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", e);
        logAdd(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}`);
        status = "stop";
        window.__zp_status = status;
        window.__zp_error = e.message;
    }
})();