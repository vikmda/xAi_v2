#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã xAi_v2
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ API endpoints –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import requests
import json
import time
import sys
from datetime import datetime
import tempfile
import os

class XAiTester:
    def __init__(self, base_url="https://831df312-52e2-4a2f-b5ff-9454a774aa99.preview.emergentagent.com"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api"
        self.tests_run = 0
        self.tests_passed = 0
        self.test_user_id = f"test_user_{int(time.time())}"
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def run_test(self, name, test_func):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.tests_run += 1
        self.log(f"üîç –¢–µ—Å—Ç {self.tests_run}: {name}")
        
        try:
            result = test_func()
            if result:
                self.tests_passed += 1
                self.log(f"‚úÖ –ü–†–û–ô–î–ï–ù: {name}")
                return True
            else:
                self.log(f"‚ùå –ü–†–û–í–ê–õ–ï–ù: {name}")
                return False
        except Exception as e:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê –≤ {name}: {str(e)}")
            return False
    
    # –ë–∞–∑–æ–≤—ã–µ API —Ç–µ—Å—Ç—ã
    def test_api_root(self):
        """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ API endpoint"""
        try:
            response = requests.get(f"{self.api_url}/", timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   API Root –æ—Ç–≤–µ—Ç: {data}")
                return "AI Sexter Bot API" in data.get("message", "")
            return False
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ API Root: {e}")
            return False
    
    def test_health_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   Health status: {data.get('status')}")
                self.log(f"   Database: {data.get('database')}")
                self.log(f"   Models loaded: {data.get('models_loaded')}")
                return data.get("status") in ["healthy", "unhealthy"]  # –õ—é–±–æ–π —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–µ–Ω
            return False
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ Health Check: {e}")
            return False
    
    def test_get_models(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        try:
            response = requests.get(f"{self.api_url}/models", timeout=10)
            if response.status_code == 200:
                data = response.json()
                models = data.get("models", [])
                self.log(f"   –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
                for model in models:
                    self.log(f"   - {model.get('name')}: {model.get('display_name')} ({model.get('language')})")
                return len(models) > 0
            return False
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    # –¢–µ—Å—Ç—ã —á–∞—Ç–∞ –∏ spintax
    def test_chat_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —á–∞—Ç–∞"""
        try:
            payload = {
                "model": "rus_girl_1",
                "user_id": self.test_user_id,
                "message": "–ü—Ä–∏–≤–µ—Ç"
            }
            response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   –û—Ç–≤–µ—Ç: {data.get('response')}")
                self.log(f"   –ù–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {data.get('message_number')}")
                self.log(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}")
                return len(data.get('response', '')) > 0
            return False
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
            return False
    
    def test_spintax_functionality(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã spintax"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ spintax
            train_payload = {
                "question": "—Ç–µ—Å—Ç —Å–ø–∏–Ω—Ç–∞–∫—Å",
                "answer": "{–ü—Ä–∏–≤–µ—Ç|–ü—Ä–∏–≤–µ—Ç–∏–∫|–•–∞–π} {–∫—Ä–∞—Å–∞–≤—á–∏–∫|–º–∏–ª—ã–π|–¥–æ—Ä–æ–≥–æ–π}!",
                "model": "rus_girl_1",
                "priority": 10
            }
            train_response = requests.post(f"{self.api_url}/train", json=train_payload, timeout=10)
            if train_response.status_code != 200:
                self.log(f"   –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è spintax: {train_response.status_code}")
                return False
            
            # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º spintax - –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            responses = []
            for i in range(5):
                payload = {
                    "model": "rus_girl_1", 
                    "user_id": f"{self.test_user_id}_spintax_{i}",
                    "message": "—Ç–µ—Å—Ç —Å–ø–∏–Ω—Ç–∞–∫—Å"
                }
                response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    answer = data.get('response', '')
                    responses.append(answer)
                    self.log(f"   Spintax –æ—Ç–≤–µ—Ç {i+1}: {answer}")
                else:
                    self.log(f"   –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            unique_responses = set(responses)
            self.log(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(unique_responses)} –∏–∑ {len(responses)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–µ—Ç —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ (spintax –æ–±—Ä–∞–±–æ—Ç–∞–Ω)
            has_brackets = any('{' in resp or '}' in resp for resp in responses)
            if has_brackets:
                self.log(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ spintax!")
                return False
            
            return len(unique_responses) > 1  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
            
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è spintax: {e}")
            return False
    
    def test_chat_progression(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —á–∞—Ç–∞ –¥–æ semi –∏ final —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = f"{self.test_user_id}_progression"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏ —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å message_count
            model_response = requests.get(f"{self.api_url}/model/rus_girl_1", timeout=10)
            if model_response.status_code != 200:
                self.log(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {model_response.status_code}")
                return False
            
            model_config = model_response.json()
            message_count = model_config.get('message_count', 5)
            self.log(f"   –ú–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            for i in range(message_count - 1):
                payload = {
                    "model": "rus_girl_1",
                    "user_id": user_id,
                    "message": f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1}"
                }
                response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    self.log(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {data.get('response')} (semi: {data.get('is_semi')}, final: {data.get('is_last')})")
                else:
                    self.log(f"   –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {response.status_code}")
                    return False
            
            # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å semi)
            payload = {
                "model": "rus_girl_1",
                "user_id": user_id,
                "message": "–ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            }
            response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   SEMI —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('response')} (semi: {data.get('is_semi')})")
                if not data.get('is_semi'):
                    self.log(f"   ‚ùå –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ semi!")
                    return False
            else:
                return False
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            payload = {
                "model": "rus_girl_1",
                "user_id": user_id,
                "message": "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            }
            response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   FINAL —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('response')} (final: {data.get('is_last')})")
                if not data.get('is_last'):
                    self.log(f"   ‚ùå –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ final!")
                    return False
                return True
            else:
                return False
                
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏: {e}")
            return False
    
    # –¢–µ—Å—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    def test_manual_training(self):
        """–¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            payload = {
                "question": "—Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è",
                "answer": "—Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ–±—É—á–µ–Ω–∏—è",
                "model": "rus_girl_1",
                "priority": 8
            }
            response = requests.post(f"{self.api_url}/train", json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è: {data.get('message')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                chat_payload = {
                    "model": "rus_girl_1",
                    "user_id": f"{self.test_user_id}_training_test",
                    "message": "—Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è"
                }
                chat_response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
                if chat_response.status_code == 200:
                    chat_data = chat_response.json()
                    self.log(f"   –û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è: {chat_data.get('response')}")
                    self.log(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∞: {chat_data.get('source')}")
                    return chat_data.get('source') == 'trained'
                return False
            return False
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_file_training(self):
        """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            training_data = """# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
—Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å 1 - —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç 1
—Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å 2 | —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç 2
—Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å 3	—Ñ–∞–π–ª –æ—Ç–≤–µ—Ç 3"""
            
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
                f.write(training_data)
                temp_file_path = f.name
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                with open(temp_file_path, 'rb') as f:
                    files = {'file': ('training.txt', f, 'text/plain')}
                    data = {'model': 'rus_girl_1'}
                    response = requests.post(f"{self.api_url}/train-file?model=rus_girl_1", files=files, timeout=15)
                
                if response.status_code == 200:
                    result = response.json()
                    self.log(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {result.get('message')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–¥–∏–Ω –∏–∑ –æ–±—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    chat_payload = {
                        "model": "rus_girl_1",
                        "user_id": f"{self.test_user_id}_file_test",
                        "message": "—Ñ–∞–π–ª –≤–æ–ø—Ä–æ—Å 1"
                    }
                    chat_response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
                    if chat_response.status_code == 200:
                        chat_data = chat_response.json()
                        self.log(f"   –û—Ç–≤–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞: {chat_data.get('response')}")
                        self.log(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {chat_data.get('source')}")
                        return chat_data.get('source') == 'trained' and '—Ñ–∞–π–ª –æ—Ç–≤–µ—Ç 1' in chat_data.get('response', '')
                    return False
                else:
                    self.log(f"   –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status_code} - {response.text}")
                    return False
                    
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file_path)
                
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_trained_responses_usage(self):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
            training_data = [
                {"question": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Å—Ç", "answer": "–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "priority": 3},
                {"question": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Å—Ç", "answer": "–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "priority": 9},
                {"question": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Å—Ç", "answer": "—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "priority": 5}
            ]
            
            for data in training_data:
                payload = {
                    "question": data["question"],
                    "answer": data["answer"],
                    "model": "rus_girl_1",
                    "priority": data["priority"]
                }
                response = requests.post(f"{self.api_url}/train", json=payload, timeout=10)
                if response.status_code != 200:
                    self.log(f"   –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {data['priority']}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            chat_payload = {
                "model": "rus_girl_1",
                "user_id": f"{self.test_user_id}_priority_test",
                "message": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Å—Ç"
            }
            response = requests.post(f"{self.api_url}/chat", json=payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                answer = data.get('response', '')
                self.log(f"   –û—Ç–≤–µ—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º: {answer}")
                return "–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" in answer
            return False
            
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {e}")
            return False
    
    # –¢–µ—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def test_statistics_collection(self):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            response = requests.get(f"{self.api_url}/statistics", timeout=10)
            if response.status_code == 200:
                data = response.json()
                self.log(f"   –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {data.get('total_conversations')}")
                self.log(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {data.get('total_users')}")
                self.log(f"   –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {data.get('system_status', {})}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                required_sections = ['total_conversations', 'total_users', 'system_status']
                for section in required_sections:
                    if section not in data:
                        self.log(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {section}")
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
                source_stats = data.get('source_stats', [])
                self.log(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(source_stats)} —Ç–∏–ø–æ–≤")
                for source in source_stats:
                    self.log(f"   - {source.get('source')}: {source.get('count')}")
                
                return True
            return False
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def test_statistics_clear_preserves_training(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            train_payload = {
                "question": "—Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è",
                "answer": "—ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è",
                "model": "rus_girl_1",
                "priority": 10
            }
            train_response = requests.post(f"{self.api_url}/train", json=train_payload, timeout=10)
            if train_response.status_code != 200:
                self.log(f"   –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            chat_payload = {
                "model": "rus_girl_1",
                "user_id": f"{self.test_user_id}_preserve_test",
                "message": "—Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"
            }
            chat_response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
            if chat_response.status_code != 200:
                self.log(f"   –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏")
                return False
            
            pre_clear_data = chat_response.json()
            self.log(f"   –û—Ç–≤–µ—Ç –¥–æ –æ—á–∏—Å—Ç–∫–∏: {pre_clear_data.get('response')}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            clear_response = requests.post(f"{self.api_url}/clear-statistics", timeout=10)
            if clear_response.status_code != 200:
                self.log(f"   –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {clear_response.status_code}")
                return False
            
            clear_data = clear_response.json()
            self.log(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏: {clear_data.get('message')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            chat_payload = {
                "model": "rus_girl_1",
                "user_id": f"{self.test_user_id}_preserve_test_after",
                "message": "—Ç–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"
            }
            chat_response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
            if chat_response.status_code == 200:
                post_clear_data = chat_response.json()
                self.log(f"   –û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {post_clear_data.get('response')}")
                self.log(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {post_clear_data.get('source')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
                return (post_clear_data.get('source') == 'trained' and 
                       '—ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è' in post_clear_data.get('response', ''))
            return False
            
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_response_sources(self):
        """–¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            sources_found = set()
            
            # –¢–µ—Å—Ç trained –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            train_payload = {
                "question": "–∏—Å—Ç–æ—á–Ω–∏–∫ trained",
                "answer": "–æ—Ç–≤–µ—Ç –∏–∑ –æ–±—É—á–µ–Ω–∏—è",
                "model": "rus_girl_1",
                "priority": 10
            }
            requests.post(f"{self.api_url}/train", json=train_payload, timeout=10)
            
            chat_payload = {
                "model": "rus_girl_1",
                "user_id": f"{self.test_user_id}_sources_trained",
                "message": "–∏—Å—Ç–æ—á–Ω–∏–∫ trained"
            }
            response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                source = data.get('source')
                sources_found.add(source)
                self.log(f"   Trained –∏—Å—Ç–æ—á–Ω–∏–∫: {source} - {data.get('response')}")
            
            # –¢–µ—Å—Ç default –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
            chat_payload = {
                "model": "rus_girl_1",
                "user_id": f"{self.test_user_id}_sources_default",
                "message": "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è default –æ—Ç–≤–µ—Ç–∞"
            }
            response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
            if response.status_code == 200:
                data = response.json()
                source = data.get('source')
                sources_found.add(source)
                self.log(f"   Default –∏—Å—Ç–æ—á–Ω–∏–∫: {source} - {data.get('response')}")
            
            # –¢–µ—Å—Ç semi –∏ final –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
            user_id = f"{self.test_user_id}_sources_progression"
            
            # –ü–æ–ª—É—á–∞–µ–º message_count –º–æ–¥–µ–ª–∏
            model_response = requests.get(f"{self.api_url}/model/rus_girl_1", timeout=10)
            if model_response.status_code == 200:
                model_config = model_response.json()
                message_count = model_config.get('message_count', 5)
                
                # –î–æ—Ö–æ–¥–∏–º –¥–æ semi —Å–æ–æ–±—â–µ–Ω–∏—è
                for i in range(message_count - 1):
                    chat_payload = {
                        "model": "rus_girl_1",
                        "user_id": user_id,
                        "message": f"–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è {i+1}"
                    }
                    response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
                    if response.status_code == 200 and i == message_count - 2:  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ
                        data = response.json()
                        source = data.get('source')
                        sources_found.add(source)
                        self.log(f"   Semi –∏—Å—Ç–æ—á–Ω–∏–∫: {source} - {data.get('response')}")
                
                # Final —Å–æ–æ–±—â–µ–Ω–∏–µ
                chat_payload = {
                    "model": "rus_girl_1",
                    "user_id": user_id,
                    "message": "—Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                }
                response = requests.post(f"{self.api_url}/chat", json=chat_payload, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    source = data.get('source')
                    sources_found.add(source)
                    self.log(f"   Final –∏—Å—Ç–æ—á–Ω–∏–∫: {source} - {data.get('response')}")
            
            self.log(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_found}")
            expected_sources = {'trained', 'default', 'semi', 'final'}
            found_expected = sources_found.intersection(expected_sources)
            
            return len(found_expected) >= 3  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 4 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            
        except Exception as e:
            self.log(f"   –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.log("üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ xAi_v2")
        self.log("=" * 60)
        
        # –ë–∞–∑–æ–≤—ã–µ API —Ç–µ—Å—Ç—ã
        self.log("\nüì° –ë–ê–ó–û–í–´–ï API –¢–ï–°–¢–´")
        self.run_test("API Root", self.test_api_root)
        self.run_test("Health Check", self.test_health_check)
        self.run_test("Get Models", self.test_get_models)
        
        # –¢–µ—Å—Ç—ã —á–∞—Ç–∞ –∏ spintax
        self.log("\nüí¨ –¢–ï–°–¢–´ –ß–ê–¢–ê –ò SPINTAX")
        self.run_test("Chat Basic", self.test_chat_basic)
        self.run_test("Spintax Functionality (–ö–†–ò–¢–ò–ß–ù–û)", self.test_spintax_functionality)
        self.run_test("Chat Progression", self.test_chat_progression)
        
        # –¢–µ—Å—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        self.log("\nüéì –¢–ï–°–¢–´ –û–ë–£–ß–ï–ù–ò–Ø")
        self.run_test("Manual Training", self.test_manual_training)
        self.run_test("File Training", self.test_file_training)
        self.run_test("Trained Responses Usage", self.test_trained_responses_usage)
        
        # –¢–µ—Å—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.log("\nüìä –¢–ï–°–¢–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
        self.run_test("Statistics Collection", self.test_statistics_collection)
        self.run_test("Statistics Clear Preserves Training (–ö–†–ò–¢–ò–ß–ù–û)", self.test_statistics_clear_preserves_training)
        
        # –¢–µ—Å—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        self.log("\nüîç –¢–ï–°–¢–´ –ò–°–¢–û–ß–ù–ò–ö–û–í –û–¢–í–ï–¢–û–í")
        self.run_test("Response Sources", self.test_response_sources)
        
        # –ò—Ç–æ–≥–∏
        self.log("\n" + "=" * 60)
        self.log(f"üèÅ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        self.log(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.tests_run}")
        self.log(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {self.tests_passed}")
        self.log(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.tests_run - self.tests_passed}")
        self.log(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(self.tests_passed/self.tests_run*100):.1f}%")
        
        if self.tests_passed == self.tests_run:
            self.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            return True
        else:
            self.log("‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´!")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = XAiTester()
    success = tester.run_all_tests()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())